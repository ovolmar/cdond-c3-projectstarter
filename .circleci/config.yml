version: 2.1
# orbs:
#   aws-cli: circleci/aws-cli@3.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflowid:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://UdaPeople-${CIRCLE_WORKFLOW_ID:0:5} --recursive
            aws cloudformation delete-stack --stack-name UdaPeople-FE-${CIRCLE_WORKFLOW_ID:0:5}
            aws cloudformation delete-stack --stack-name UdaPeople-BE-${CIRCLE_WORKFLOW_ID:0:5}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflowid:
        type: string
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # URL="goes here"
            # if curl -s --head ${URL}
            SUCCESS=$( curl -H "token:6e:27:01:7e:76:8a:ca:b8:4b:38:99:83:81:2e:46:ca" --request GET https://api.memstash.io/values/migration-<<parameters.workflow_id>> )
            
            if(( $SUCCESS != 0)); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:18.3.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm audit fix
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/node:18.3.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend build
          command: |
            cd ./backend
            source .env
            nmp install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: cimg/node:18.3.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: backend-test
          command: |
              cd ./frontend
              npm run test
                
  test-backend:
    docker:
      - image: cimg/node:18.3.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test backend
          command: |
            cd ./backend
            npm run test
  scan-frontend:
    docker:
      - image: cimg/node:18.3.0
    steps:
      - checkout
      - restore_cache: 
          keys: [frontend-build]
      - run: 
          name: scan frontend
          command: |
            cd ./frontend
            npm audit --audit-level=critical


  scan-backend:
    docker:
      - image: cimg/node:18.3.0
    steps:
      - checkout
      - restore_cache: 
          keys: [backend-build]
      - run: 
          name: scan backend
          command: |
            cd ./backend
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=UdaPeople-backend \
              --stack-name backend-"${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
            export BACKEND_URL=$(aws cloudformation describe-stacks \
              --stack-name backend-"${CIRCLE_WORKFLOW_ID}" \
              --query "Stacks[0].Outputs[?OutputKey=='BackendURL'].OutputValue" \
              --no-paginate --output text)
            echo $BACKEND_URL
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request PUT --data "${BACKEND_URL}" \
              https://api.memstash.io/values/backendurl
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=UdaPeople-frontend \
              --stack-name frontend-"${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            export BACKEND_URL=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request GET https://api.memstash.io/values/backendurl)
            echo "${BACKEND_URL}" >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - run: 
          name: installing tools
          command: | 
              yum -y install gzip tar
      - persist_to_workspace:
          root: ~/
          paths:
            - .circleci/ansible/inventory.txt

      - destroy-environment:
          workflowid: "${CIRCLE_WORKFLOW_ID}"
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "6e:27:01:7e:76:8a:ca:b8:4b:38:99:83:81:2e:46:ca"
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible aws-cli
      - run:
          name: Configure server
          command: |
            ansible-playbook -i /tmp/workspace/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment:
          workflowid: "${CIRCLE_WORKFLOW_ID}"

  run-migrations:
    docker:
      - image: cimg/node:18.3.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |    
            cd backend
            source .env
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            exit 1
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
          export API_URL=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request GET https://api.memstash.io/values/backendurl)
            export API_URL="http://${API_URL}:3030"
            echo "${API_URL}" > .circleci/api_url.txt
      - run:
          name: Deploy frontend objects
          command: |
            export API_URL=$(cat .circleci/api_url.txt)
            echo "${API_URL}" > frontend/.env
            cd frontend
            npm i
            npm run build
            aws s3 cp dist s3://UdaPeople-"${CIRCLE_WORKFLOW_ID}" --recursive

      - destroy-environment:
          workflowid: "${CIRCLE_WORKFLOW_ID}"
      - revert-migrations:
          workflowid: "${CIRCLE_WORKFLOW_ID}"
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "6e:27:01:7e:76:8a:ca:b8:4b:38:99:83:81:2e:46:ca"
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update tar aws-cli ansible 
      - run:
          name: Deploy backend
          command: |
            tar -xzvf backend.tgz -C backend/
            export ANSIBLE_HOST_KEY_CHECKING=FALSE
            ansible-playbook -i ./.circleci/ansible/inventory.txt ./.circleci/ansible/deploy-backend.yml
      - destroy-environment:
          workflowid: "${CIRCLE_WORKFLOW_ID}"


  smoke-test:
    docker:
      - image: cimg/node:18.3.0
    steps:
      - checkout
      - attach_workspace:
          at: . 
      - run:
          name: Installing deps
          command: |
            sudo apt-get -y update npm
            sudo apt-get install -y awscli python3 ansible
      - run:
          name: Get backend url
          command: |
            curl -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request GET https://api.memstash.io/values/backendurl \
              > backend-url.txt
      - run:
          name: Backend smoke test.
          command: |
            url=$(cat backend-url.txt)
            url="http://${url}:3030/api/status"
            curl $url
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://UdaPeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-east-1.amazonaws.com"
            curl -s "${URL}"
      - destroy-environment:
          workflowid: "${CIRCLE_WORKFLOW_ID}"

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo yum install -y curl
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo "${OldWorkflowID}"
            echo "${STACKS[@]}"

            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" \
            --request PUT --data "${OldWorkflowID}" \
             https://api.memstash.io/values/oldworkflowid


            aws cloudformation update-stack \
            --use-previous-template \
            --stack-name cloudfront-${OldWorkflowID} \
            --parameters ParameterKey=WorkflowID,ParameterValue=$CIRCLE_WORKFLOW_ID,UsePreviousValue=false

      - destroy-environment: 
            workflowid: "${CIRCLE_WORKFLOW_ID}"
  cleanup:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Get old stack workflow id
            command: |
              sudo yum install -y curl
              export OldWorkflowID="the id here"
              export STACKS=[] #put the list of stacks here
        - run:
            name: Remove old stacks and files
            command: |
              # if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              # then
              #   # your code here
              # fi
              export OldWorkflowID=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request GET https://api.memstash.io/values/oldworkflowid)
              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
                aws s3 rm s3://UdaPeople-"${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name frontend-"${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name backend-"${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name cloudfront-"${OldWorkflowID}"
              fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]